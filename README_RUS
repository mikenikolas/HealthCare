Версия README: 1.0
Дата: 28.02.12
Количество модулей: 1
Количество разработчиков: 1


О ПРИЛОЖЕНИИ

SelfHub - Open Source приложение для IOS, предназначенное для сбора, накопления и анализа различных медицинских показателей пациента. Конечной целью является создание полноценного приложения самодиагностики, которое по ряду показателей может в нужный момент оповестить пользователя о необходимости обратиться за медицинской помощью. Для реализации этой идеи допускается использовать различные медицинские датчики, взаимодействующие с iphone. Приложение написано для работы на устройствах iphone и ipod touch. В процессе развития возможна миграция на iPad.

1.	ОСОБЕННОСТИ МОДУЛЬНОЙ АРХИТЕКТУРЫ.
Для упрощения и независимости процесса разработки, в приложении используется модульная архитектура. Каждый модуль выполняет сбор и обработку определенной информации из одной медицинской области. Например, модуль контроля веса, модуль контроля артериального давления, модуль контроля сахара в крови и т.д. Помимо модулей контроля необходима разработка модулей анализа, которые используют данные модулей контроля и выполняют некоторые диагностические функции. Общая концепция приложения – NavigationBar. Главный вид (назовем его серверной частью приложения или просто сервером) отображает список всех модулей и позволяет переключаться между ними. Сервер принимает протокол ServerProtocol и является делегатом для каждого модуля. Любой обмен данными между модулями происходит с использованием методов протокола ServerProtocol:
- (BOOL)isModuleAvailableWithID:(NSString *);
Вернуть истину, если модуль с заданным идентификатором загружен

- (id)getValueForName:(NSString *) fromModuleWithID:(NSString *);
Получить значение параметра с заданным именем (из Exchange-list) из модуля с указанным идентификатором

- (BOOL)setValue:(id) forName:(NSString *) forModuleWithID:(NSString *); 
Установить значение параметра с заданным именем (из Exchange-list) в модуле с указанным идентификатором (параметр должен быть отмечен как НЕ read-only)

Для обеспечения обмена данными, в каждом модуле должен быть сформированный Exchange-list. Его структура описана в пункте 1.4.

1.1 Список загружаемых модулей
Во время загрузки главного представления, происходит чтение списка модулей из файла AllModules.plist. Он содержит массив элементов NSDictionary, которые состоят из следующих ключей:
• Interface – название класса модуля (String)
• ID – текстовый идентификатор модуля, например selfhub.module_name (String) 
• ExchangeFile – имя файла, содержащего Exchange-list (String)
• Type – тип модуля, зарезервировано для дальнейшего использования (Integer)
Идентификаторы разных модулей не должны совпадать.  Список модулей загружается один раз при запуске приложения. Также возможно обращение к этому файлу при использовании вспомогательных тестирующих функций.

1.2 Требования, предъявляемые к модулю
1.2.1 На данный момент модули реализуются в виде открытого исходного кода в основном проекте. Использование модулей в виде подгружаемых библиотек будет введено по мере необходимости.
1.2.2 В проекте модуль располагается в папке Modules\module_name\
1.2.3 Класс модуля является наследником UIViewController.
1.2.4 Переход между представлениями внутри модуля и возврат к главному представлению происходит через Navigation Bar.
1.2.5 Модуль принимает протокол ModuleProtocol и реализует в себе все его обязательные функции (пункт 1.3).
1.2.6 Базовый язык – английский. Локализация модуля происходит с использованием макроса NSLocalizedString. Не рекомендуется использовать другие локализованные ресурсы, такие как картинки, *.nib файлы и др. – это усложняет процесс локализации на другие языки. Все текстовые поля в интерфейсе модуля должны инициализироваться программно в методе viewDidLoad с использованием макроса NSLocalizedString(@”My_string”, @””). Локализованные строки должны быть добавлены в файл проекта \Localizations\Localizable.strings в отдельный раздел модуля (отделенный комментариями от остальных строк).
1.2.7 Модуль сохраняет свои данные в поддиректории с именем ID этого модуля (например, ~\Documents\selfhub.module_name\).
1.2.8 В модуле должно быть реализованы все функции по выделению и освобождению памяти (viewDidUnload, dealloc), так как при получении сообщения о нехватке памяти, часть неиспользуемых модулей может быть выгружена из памяти сервером.
1.2.9 Любой файл ресурсов должен начинаться с имени или идентификатора модуля (например, module_name.mainframe.png). Все модули собираются в едином Bundle, что может вызвать конфликты при именовании ресурсов.
1.2.10 Модуль должен удовлетворять всем требованиям Apple по разработке программного обеспечения под IOS, а также требованиям iPhone HIG (Human Interface Guidelines).
1.2.11 Работа модуля должна быть независима от серверной части приложения. Предполагается, что если вставить отдельный модуль в новый проект – он будет работать также.
1.2.12 Модуль должен самостоятельно считывать и записывать нужные ему данные (целесообразно это делать в методах viewWillAppear и viewDidDisappear соответственно). В случае необходимости (как минимум, при загрузке всех модулей), серверная часть приложения может самостоятельно инициировать загрузку или сохранение данных модуля через протокол ModuleProtocol.
1.2.13 Атрибуты, описанные в Exchange-list, должны удовлетворять требованиям KVC (Key-Value Coding)

1.3 Функции протокола ModuleProtocol
1.3.1 Методы, обязательные для реализации
- (id)initModuleWithDelegate:(id<ServerProtocol>)serverDelegate;
Функция, вызываемая сервером при инициализации модуля. В качестве параметра передается делегат сервера.

- (NSString *)getModuleName;
Возвращает локализованное имя модуля (отображаемое в таблице главного представления).

- (NSString *)getModuleDescription;
Возвращает локализованное описание модуля (отображаемое в таблице главном представления).

- (NSString *)getModuleMessage;
Локализованное сообщение модуля (отображаемое в таблице главном представления). Сообщение адресуется пользователю и в краткой форме оповещает его о функционировании модуля (например, напоминание о необходимости провести очередное измерение веса).

- (UIImage *)getModuleIcon;
Иконка модуля, отображаемая в таблице главного представления. Размер иконки: 120х120. Формат - PNG

- (BOOL)isInterfaceIdiomSupportedByModule:(UIUserInterfaceIdiom)idiom;
Возвращает истину при поддержке переданной модели интерфейса (iphone\ipad). Модель iPhone должна поддерживаться в любом случае.

- (void)loadModuleData;
Загрузка данных модуля. Метод вызывается самим модулем при необходимости загрузки сохраненных данных, а также серверной частью приложения при инициализации модуля.

- (void)saveModuleData;
Сохранение данных модуля. Метод вызывается самим модулем при необходимости сохранения рабочих данных, а также серверной частью приложения при выгрузке модуля из памяти.

1.3.2 Опциональные методы
- (float)getModuleVersion;
Возвращает версию модуля (1.0 по умолчанию)

1.4 Формат списка Exchange-list
Список Exchange-list хранится в plist-файле (например, module_name.export.plist). Главный элемент списка – массив с именем items. Каждый элемент массива представляет собой объект NSDictionary со следующими ключами:
• name (тип String) – обязательное имя exchange-параметра, используемое  другими модулями при запросе у серверной части параметра этого модуля. Уникально в рамках текущего модуля;
• keypath (тип String) – обязательный ключ модуля, передаваемый методу [ModuleViewController valueForKeyPath:] при запросе у модуля параметра с именем name;
• type (тип String) – тип параметра (NSString, NSNumber, NSDictionary, NSData и т.д). В процессе получения параметров не участвует. Несет информационный смысл для других разработчиков о типе получаемого или устанавливаемого параметра;
• readonly (тип BOOL) – если установлено в YES, параметр не может быть установлен сторонним модулем. По умолчанию (если это поле отсутствует) параметр считается доступным для чтения и для записи;
• description (тип String) – описание параметра. Опциональное поле, несущее  информационный характер для других разработчиков.
При формировании Exchange-list, для проверки корректности описания параметров можно воспользоваться методом  testExchangeListForModuleWithID: из вспомогательного класса ModuleHelper:
[[ModuleHelper sharedHelper] testExchangeListForModuleWithID:@”selfhub.moduleID”];
Метод пытается считать и записать параметры для заданного модуля, согласно списку Exchange-list и выводит диагностические сообщения в консоль. В случае критической ошибки произойдет аварийное завершение приложения.

1.5 Класс ModuleHelper
Класс содержит вспомогательные методы, используемые в процессе разработки модуля. Доступ к методам происходит следующим образом:
[[ModuleHelper sharedHelper] selector];
 
2.	РАЗВИТИЕ ПРИЛОЖЕНИЯ В РЕЖИМЕ OPEN-SOURCE
2.1 Перспективы развития набора модулей
В процессе дальнейшего  развития приложения планируется реализовать следующие модули:
• контроль веса с предсказанием прогресса изменения (в том числе применительно к Wi-Fi весам);
• контроль артериального давления (рассмотреть возможность подключения сторонних датчиков);
• контроль сахара в крови;
• контроль ЭКГ (сторонние датчики);
• программа тренировок в тренажерном зале;
• экспорт всех данных приложения в «облако»;
• учет различных медицинских анализов.

